Help on package healpix:

NAME
    healpix - Python package for HEALPix discretisation of the sphere

PACKAGE CONTENTS
    test (package)

FUNCTIONS
    ang2pix(nside, theta, phi, nest=False, lonlat=False)
    
    ang2vec(theta, phi, lonlat=False)
    
    nest2ring(nside, ipix)
    
    npix2nside(npix)
    
    nside2npix(nside)
    
    nside2order(nside)
        Return the HEALPix order for a given NSIDE parameter.
    
    order2nside(order)
        Return the NSIDE parameter for a given HEALPix order.
    
    pix2ang(nside, ipix, nest=False, lonlat=False)
    
    pix2uniq(order, ipix, nest=False)
        Convert RING or NEST to UNIQ pixel scheme.
        
        Returns a pixel index in the UNIQ scheme for each pair of HEALPix
        order `order` and pixel index `ipix` in the RING scheme (if `nest`
        is false, the default) or the NEST scheme (if `nest` is true).
    
    pix2vec(nside, ipix, nest=False)
    
    randang(nside, ipix, nest=False, lonlat=False, rng=None)
        Sample random spherical coordinates from the given HEALPix pixels.
        
        This function produces one pair of random spherical coordinates from each
        HEALPix pixel listed in `ipix`, which can be scalar or array-like.  The
        indices use the `nside` resolution parameter and either the RING scheme
        (if `nest` is false, the default) or the NEST scheme (if `nest` is true).
        
        Returns either a tuple `theta, phi` of mathematical coordinates in radians
        if `lonlat` is False (the default), or a tuple `lon, lat` of longitude and
        latitude in degrees if `lonlat` is True.  The output is of the same shape
        as the input.
        
        An optional numpy random number generator can be provided using `rng`;
        otherwise, a new numpy.random.default_rng() is used.
    
    randvec(nside, ipix, nest=False, rng=None)
        Sample random unit vectors from the given HEALPix pixels.
        
        This function produces one random unit vector from each HEALPix pixel
        listed in `ipix`, which can be scalar or array-like.  The pixel indices use
        the `nside` resolution parameter and either the RING scheme (if `nest` is
        false, the default) or the NEST scheme (if `nest` is true).
        
        Returns a tuple `x, y, z` of normalised vector components with the same
        shape as the input.
        
        An optional numpy random number generator can be provided using `rng`;
        otherwise, a new numpy.random.default_rng() is used.
    
    ring2nest(nside, ipix)
    
    uniq2pix(uniq, nest=False)
        Convert from UNIQ to RING or NEST pixel scheme.
        
        Returns a tuple `order, ipix` of HEALPix orders and pixel indices in
        the RING scheme (if `nest` is false, the default) or the NEST scheme
        (if `nest` is true).
    
    vec2ang(x, y, z, lonlat=False)
    
    vec2pix(nside, x, y, z, nest=False)

DATA
    NSIDE_MAX = 536870912

VERSION
    2024.1


Help on module chealpix:

NAME
    chealpix - healpix C library interface

FUNCTIONS
    ang2nest(nside, theta, phi, ipix=None, /)
    
    ang2nest_uv(nside, theta, phi, ipix=None, u=None, v=None, /)
    
    ang2ring(nside, theta, phi, ipix=None, /)
    
    ang2ring_uv(nside, theta, phi, ipix=None, u=None, v=None, /)
    
    ang2vec(nside, theta, phi, x=None, y=None, z=None, /)
    
    nest2ang(nside, ipix, theta=None, phi=None, /)
    
    nest2ang_uv(nside, ipix, u, v, theta=None, phi=None, /)
    
    nest2ring(nside, ipnest, ipring=None, /)
    
    nest2uniq(order, ipix, uniq=None, /)
    
    nest2vec(nside, ipix, x=None, y=None, z=None, /)
    
    nest2vec_uv(nside, ipix, u, v, x=None, y=None, z=None, /)
    
    npix2nside(npix, /)
    
    nside2npix(nside, /)
    
    nside2order(nside, /)
    
    order2nside(order, /)
    
    ring2ang(nside, ipix, theta=None, phi=None, /)
    
    ring2ang_uv(nside, ipix, u, v, theta=None, phi=None, /)
    
    ring2nest(nside, ipring, ipnest=None, /)
    
    ring2uniq(order, ipix, uniq=None, /)
    
    ring2vec(nside, ipix, x=None, y=None, z=None, /)
    
    ring2vec_uv(nside, ipix, u, v, x=None, y=None, z=None, /)
    
    uniq2nest(uniq, order=None, ipix=None, /)
    
    uniq2ring(uniq, order=None, ipix=None, /)
    
    vec2ang(nside, x, y, z, theta=None, phi=None, /)
    
    vec2nest(nside, x, y, z, ipix=None, /)
    
    vec2nest_uv(nside, x, y, z, ipix=None, u=None, v=None, /)
    
    vec2ring(nside, x, y, z, ipix=None, /)
    
    vec2ring_uv(nside, x, y, z, ipix=None, u=None, v=None, /)

DATA
    NSIDE_MAX = 536870912

VERSION
    2024.1


